观察者模式又叫发布订阅模式（Publish/Subscribe），它定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使得它们能够自动更新自己。

使用观察者模式的好处：

支持简单的广播通信，自动通知所有已经订阅过的对象。
页面载入后目标对象很容易与观察者存在一种动态关联，增加了灵活性。
目标对象与观察者之间的抽象耦合关系能够单独扩展以及重用。

---------------------------------------------------------------


From a software architecture perspective, jQuery publishes the link element’s
events to anyone who wants to subscribe. That’s why it’s called “PubSub.”


jQuery  Pub  link.onclick   
        Pub  link.onclick  
        
        
function clickHandler1(); Sub <- link.onclick
function clickHandler2(); Sub <- link.onclick




$(link)
.bind('click', clickHandler1)
.bind('click', clickHandler2);




----------------------------------------

From a software architecture perspective, jQuery publishes the link element’s
events to anyone who wants to subscribe. That’s why it’s called “PubSub.” (jQuery is PubSub object/interface )

----------------------------------------

Let’s use Node’s EventEmitter as an example of a PubSub interface. It has a
simple, nearly minimal design.

To add an event handler to an EventEmitter, just call on with the event type and
the handler.
emitter.on('evacuate', function(message) {
console.log(message);
});
The emit method will call all handlers for the given event type. For instance,
the following
emitter.emit('evacuate');
would call all evacuate handlers.

The emit method will call all handlers for the given event type. For instance,
the following
emitter.emit('evacuate');
would call all evacuate handlers.
Note that the term event here has nothing to do with the event queue.
