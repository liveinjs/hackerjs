通常一个类，或者一个对象，将包含其它的对象在里面。

工厂模式： 就是创建对象的一种模式. 一种是在 用外部对象创建（或者 类的静态成员创建），一种是在用子类的实例对象创建

当这些成员需要被创建的时候，通过 new 还有constractor 容易实现.
但是，问题问出了: 这将创建一个依赖，在这两个类之类。




--------------------------------------------------------------

var name = { field1:1, field2:2, mothed1: fn1(){},mothed2:fn2,...}

-----------------------------
var BicycleFactory = {
    createBicycle: function(){ //包含创建对象的 方法。
    ...
    }
}

简单工厂模式，把成员对象的创建放到外部对象（单体）中。是单体模式的扩展，

------------------------------------------

/* BicycleShop class (abstract). */ 抽象工厂
var BicycleShop = function() {};
BicycleShop.prototype = {
    sellBicycle: function(model) {
        var bicycle = this.createBicycle(model);
        bicycle.assemble();
        bicycle.wash();
        return bicycle;
    },
    createBicycle: function(model) { // 工厂方法
        throw new Error('Unsupported operation on an abstract class.');
    }
};


var AcmeBicycleShop = function() {};
extend(AcmeBicycleShop, BicycleShop);
AcmeBicycleShop.prototype.createBicycle = function(model) {  //工厂方法
    var bicycle;
    switch(model) {
        case 'The Speedster':
            bicycle = new AcmeSpeedster(); 
            break;
        case 'The Lowrider':
            bicycle = new AcmeLowrider();
            break;
        case 'The Flatlander':
            bicycle = new AcmeFlatlander();
            break;
        case 'The Comfort Cruiser':
        default:
            bicycle = new AcmeComfortCruiser();
    }
    
    
抽象工厂模式：是简单工厂的扩张， 先定义一个子类，再弄 “简单工厂”
